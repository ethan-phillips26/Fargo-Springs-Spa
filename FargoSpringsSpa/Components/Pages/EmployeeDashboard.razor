@page "/employee"
@using System.ComponentModel.DataAnnotations
@using FargoSpringsSpa.Data
@using FargoSpringsSpa.Models
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inject FargoSpringsSpaContext DbContext
@rendermode InteractiveServer

<div class="container">
    <h2>Update Your Availability</h2>

    <p>Hello, @UserSession.GetUserName()!</p>

    <div class="card">
        <div class="card-body">
            <form>
                <h4>Working Hours</h4>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Start Time:</label>
                        <input type="time" value="@startTime.ToString("HH:mm")" @onchange="StartTimeChanged" class="form-control" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">End Time:</label>
                        <input type="time" value="@endTime.ToString("HH:mm")" @onchange="EndTimeChanged" class="form-control" />

                    </div>
                </div>

                <h4>Days Available</h4>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="monday" id="monday">
                            <label class="form-check-label" for="monday">Monday</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="tuesday" id="tuesday">
                            <label class="form-check-label" for="tuesday">Tuesday</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="wednesday" id="wednesday">
                            <label class="form-check-label" for="wednesday">Wednesday</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="thursday" id="thursday">
                            <label class="form-check-label" for="thursday">Thursday</label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="friday" id="friday">
                            <label class="form-check-label" for="friday">Friday</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="saturday" id="saturday">
                            <label class="form-check-label" for="saturday">Saturday</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="sunday" id="sunday">
                            <label class="form-check-label" for="sunday">Sunday</label>
                        </div>
                    </div>
                </div>

                <button type="button" @onclick="SaveAvailability" class="btn btn-primary" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span>Saving...</span>
                    }
                    else
                    {
                        <span>Save</span>
                    }
                </button>

                @if (showMessage)
                {
                    <div class="alert alert-success mt-3">
                        Availability updated successfully!
                    </div>
                }
            </form>
        </div>
    </div>

    <div class="card mt-4">
        <div class="card-body">
            <h4>Your Upcoming Bookings</h4>

            @if (upcomingBookings.Count == 0)
            {
                <p>Loading bookings...</p>
            }
            else if (!upcomingBookings.Any())
            {
                <p>You have no upcoming bookings.</p>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Date & Time</th>
                                <th>Service</th>
                                <th>Customer</th>
                                <th>Duration</th>
                                <th>Price</th>
                                <th>Notes</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var booking in upcomingBookings)
                            {
                                <tr>
                                    <td>@booking.AppointmentDate.ToString("MMM dd, yyyy h:mm tt")</td>
                                    <td>@booking.Service.Name</td>
                                    <td>@booking.User.Name</td>
                                    <td>@booking.Service.DurationInMinutes min</td>
                                    <td>$@booking.Service.Price.ToString("F2")</td>
                                    <td>@(string.IsNullOrEmpty(booking.Notes) ? "-" : booking.Notes)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@code {
    // We can maybe update this to use the employees current schedule time, for now just default to 9 - 5
    private DateTime startTime = DateTime.Today.AddHours(9);
    private DateTime endTime = DateTime.Today.AddHours(17);

    private bool monday = false;
    private bool tuesday = false;
    private bool wednesday = false;
    private bool thursday = false;
    private bool friday = false;
    private bool saturday = false;
    private bool sunday = false;

    private bool showMessage = false;
    private bool isLoading = false;

    private List<Booking> upcomingBookings = new List<Booking>();

    protected override async Task OnInitializedAsync()
    {
        await LoadExistingAvailability();
        await LoadUpcomingBookings();
    }

    private async Task LoadExistingAvailability()
    {
        try
        {
            int employeeId = UserSession.GetUserId();
            var employee = await DbContext.Employee.FindAsync(employeeId);

            if (employee?.Availability != null)
            {
                var existingAvailability = employee.Availability;
                startTime = DateTime.Today.Add(existingAvailability.StartTime.ToTimeSpan());
                endTime = DateTime.Today.Add(existingAvailability.EndTime.ToTimeSpan());
                monday = existingAvailability.Monday;
                tuesday = existingAvailability.Tuesday;
                wednesday = existingAvailability.Wednesday;
                thursday = existingAvailability.Thursday;
                friday = existingAvailability.Friday;
                saturday = existingAvailability.Saturday;
                sunday = existingAvailability.Sunday;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading availability: {ex.Message}");
        }
    }

    private async Task LoadUpcomingBookings()
    {
            int employeeId = UserSession.GetUserId();
            var today = DateTime.Today;

            upcomingBookings = await DbContext.Booking
                .Include(b => b.Service)
                .Include(b => b.User)
                .Where(b => b.EmployeeId == employeeId && b.AppointmentDate >= today)
                .OrderBy(b => b.AppointmentDate)
                .ToListAsync();


            StateHasChanged();
    }

    // Need to convert to string and back because values keep getting reset
    private void StartTimeChanged(ChangeEventArgs e)
    {
        if (TimeSpan.TryParse(e.Value?.ToString(), out var ts))
        {
            startTime = DateTime.Today.Add(ts);
        }
    }

    private void EndTimeChanged(ChangeEventArgs e)
    {
        if (TimeSpan.TryParse(e.Value?.ToString(), out var ts))
        {
            endTime = DateTime.Today.Add(ts);
        }
    }

    private async Task SaveAvailability()
    {
        if (isLoading) return;

        isLoading = true;

        int employeeId = UserSession.GetUserId();

        var availability = await DbContext.EmployeeAvailability
        .FirstOrDefaultAsync(ea => ea.Id == employeeId);

        availability.StartTime = TimeOnly.FromDateTime(startTime);
        availability.EndTime = TimeOnly.FromDateTime(endTime);
        availability.Monday = monday;
        availability.Tuesday = tuesday;
        availability.Wednesday = wednesday;
        availability.Thursday = thursday;
        availability.Friday = friday;
        availability.Saturday = saturday;
        availability.Sunday = sunday;

        await DbContext.SaveChangesAsync();

        showMessage = true;

        // Hide message after 3 seconds
        _ = Task.Run(async () =>
        {
            await Task.Delay(3000);
            showMessage = false;
            await InvokeAsync(StateHasChanged);
        });

        isLoading = false;
    }
}
@page "/testimonials"
@using System.ComponentModel.DataAnnotations

<PageTitle>Testimonials - Fargo Springs Spa</PageTitle>

<h1>What Our Clients Say</h1>

<div class="testimonials-container">
    @if (testimonials != null && testimonials.Any())
    {
        <div class="testimonials-grid">
            @foreach (var testimonial in testimonials)
            {
                <div class="testimonial-card">
                    <div class="testimonial-content">
                        <p class="testimonial-text">"@testimonial.Message"</p>
                        <div class="testimonial-author">
                            <strong>@testimonial.ClientName</strong>
                            @if (!string.IsNullOrEmpty(testimonial.Service))
                            {
                                <span class="service-mention"> - @testimonial.Service</span>
                            }
                        </div>
                        <div class="testimonial-rating">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <span class="star @(i <= testimonial.Rating ? "filled" : "")">★</span>
                            }
                        </div>
                        <small class="testimonial-date">@testimonial.Date.ToString("MMMM yyyy")</small>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>Loading testimonials...</p>
    }
</div>

<div class="add-testimonial-section">
    <h2>Share Your Experience</h2>
    <EditForm Model="newTestimonial" OnValidSubmit="AddTestimonial">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="clientName">Your Name:</label>
            <InputText id="clientName" @bind-Value="newTestimonial.ClientName" class="form-control" />
            <ValidationMessage For="@(() => newTestimonial.ClientName)" />
        </div>

        <div class="form-group">
            <label for="service">Service Received (optional):</label>
            <InputSelect id="service" @bind-Value="newTestimonial.Service" class="form-control">
                <option value="">Select a service</option>
                <option value="Massage Therapy">Massage Therapy</option>
                <option value="Facial Treatment">Facial Treatment</option>
                <option value="Hot Stone Therapy">Hot Stone Therapy</option>
                <option value="Aromatherapy">Aromatherapy</option>
                <option value="Body Wrap">Body Wrap</option>
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="rating">Rating:</label>
            <InputSelect id="rating" @bind-Value="newTestimonial.Rating" class="form-control">
                <option value="5">5 Stars - Excellent</option>
                <option value="4">4 Stars - Very Good</option>
                <option value="3">3 Stars - Good</option>
                <option value="2">2 Stars - Fair</option>
                <option value="1">1 Star - Poor</option>
            </InputSelect>
            <ValidationMessage For="@(() => newTestimonial.Rating)" />
        </div>

        <div class="form-group">
            <label for="message">Your Testimonial:</label>
            <InputTextArea id="message" @bind-Value="newTestimonial.Message" class="form-control" rows="4" />
            <ValidationMessage For="@(() => newTestimonial.Message)" />
        </div>

        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
            @if (isSubmitting)
            {
                <text>Submitting...</text>
            }
            else
            {
                <text>Submit Testimonial</text>
            }
        </button>
    </EditForm>
</div>

@code {
    private List<Testimonial> testimonials = new();
    private Testimonial newTestimonial = new();
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        LoadSampleTestimonials();
    }

    private void LoadSampleTestimonials()
    {
        testimonials = new List<Testimonial>
        {
            new Testimonial
            {
                ClientName = "Sarah M.",
                Message = "The hot stone massage was absolutely incredible. I felt so relaxed and refreshed. The staff was professional and the atmosphere was perfect.",
                Service = "Hot Stone Therapy",
                Rating = 5,
                Date = DateTime.Now.AddMonths(-2)
            },
            new Testimonial
            {
                ClientName = "Mike J.",
                Message = "Best facial I've ever had! My skin looks and feels amazing. Will definitely be coming back.",
                Service = "Facial Treatment",
                Rating = 5,
                Date = DateTime.Now.AddMonths(-1)
            },
            new Testimonial
            {
                ClientName = "Jennifer K.",
                Message = "The aromatherapy session was so calming. Exactly what I needed after a stressful week at work.",
                Service = "Aromatherapy",
                Rating = 4,
                Date = DateTime.Now.AddDays(-14)
            },
            new Testimonial
            {
                ClientName = "David R.",
                Message = "Great service and wonderful ambiance. The massage therapy helped with my back pain significantly.",
                Service = "Massage Therapy",
                Rating = 5,
                Date = DateTime.Now.AddDays(-10)
            }
        };
    }

    private async Task AddTestimonial()
    {
        isSubmitting = true;

        
        await Task.Delay(1000);

        
        var testimonial = new Testimonial
        {
            ClientName = newTestimonial.ClientName,
            Message = newTestimonial.Message,
            Service = newTestimonial.Service,
            Rating = newTestimonial.Rating,
            Date = DateTime.Now
        };

        testimonials.Insert(0, testimonial); // Add to beginning of list

        // Reset form
        newTestimonial = new Testimonial();
        isSubmitting = false;

        StateHasChanged(); // Refresh the UI
    }

    public class Testimonial
    {
        [Required(ErrorMessage = "Please enter your name")]
        [StringLength(100, ErrorMessage = "Name must be less than 100 characters")]
        public string ClientName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please share your experience")]
        [StringLength(1000, ErrorMessage = "Testimonial must be less than 1000 characters")]
        public string Message { get; set; } = string.Empty;

        public string Service { get; set; } = string.Empty;

        [Range(1, 5, ErrorMessage = "Please select a rating")]
        public int Rating { get; set; } = 5;

        public DateTime Date { get; set; } = DateTime.Now;
    }
}
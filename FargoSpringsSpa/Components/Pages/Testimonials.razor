@page "/testimonials"
@using FargoSpringsSpa.Data
@using FargoSpringsSpa.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<FargoSpringsSpaContext> DbFactory
@rendermode InteractiveServer

<PageTitle>Testimonials - Fargo Springs Spa</PageTitle>

<div class="container-fluid py-5">
    <div class="row mb-5">
        <div class="col-12 text-center">
            <h1 class="display-4 text-black fw-bold mb-3">What Our Clients Say</h1>
            <p class="lead text-muted">Real feedback from real guests—our top five highlights below</p>
        </div>
    </div>
</div>

<link href="css/adminMessages.css?v=2" rel="stylesheet" />
<link href="css/testimonials.min.css?v=1" rel="stylesheet" />

<div class="admin-wrap">
    <div class="header-row">
        <h3>Top Testimonials <span class="badge bg-secondary" title="Total results">@((topFive?.Count ?? 0))</span></h3>
    </div>

    @if (topFive is null)
    {
        <div class="empty">Loading testimonials...</div>
    }
    else if (topFive.Count == 0)
    {
        <div class="empty">No testimonials yet.</div>
    }
    else
    {
        <div class="list">
            @foreach (var t in topFive)
            {
                <article class="pill-card">
                    <div class="pill-body">
                        <div class="pill-top">
                            <div>
                                <div class="pill-name">
                                    @t.ClientName
                                    @if (!string.IsNullOrWhiteSpace(t.Service))
                                    {
                                        <span class="pill-email">· @t.Service</span>
                                    }
                                </div>
                                <div class="pill-subject">
                                    <span class="stars">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            <span class="star @(i <= t.Rating ? "filled" : "")">★</span>
                                        }
                                    </span>
                                </div>
                            </div>
                            <div class="pill-date">@t.Date.ToLocalTime().ToString("g")</div>
                        </div>
                        <div class="pill-message" title="@t.Message">@t.Message</div>
                    </div>
                </article>
            }
        </div>
    }
</div>

<div class="add-testimonial-section">
    <h2>Share Your Experience</h2>
    <EditForm Model="newTestimonial" OnValidSubmit="AddTestimonial" FormName="AddTestimonialForm">
        <DataAnnotationsValidator />
        <ValidationSummary class="validation-summary" />

        <div class="form-group">
            <label>Your Name:</label>
            <InputText class="form-control" @bind-Value="newTestimonial.ClientName" />
            <ValidationMessage For="@(() => newTestimonial.ClientName)" />
        </div>

        <div class="form-group">
            <label>Service Received (optional):</label>
            <InputSelect class="form-control" @bind-Value="newTestimonial.Service">
                <option value="">Select a service</option>
                <option>Massage Therapy</option>
                <option>Facial Treatment</option>
                <option>Hot Stone Therapy</option>
                <option>Aromatherapy</option>
                <option>Body Wrap</option>
            </InputSelect>
        </div>

        <div class="form-group">
            <label>Rating:</label>
            <InputSelect class="form-control" @bind-Value="newTestimonial.Rating">
                <option value="5">5 Stars</option>
                <option value="4">4 Stars</option>
                <option value="3">3 Stars</option>
                <option value="2">2 Stars</option>
                <option value="1">1 Star</option>
            </InputSelect>
            <ValidationMessage For="@(() => newTestimonial.Rating)" />
        </div>

        <div class="form-group">
            <label>Your Testimonial:</label>
            <InputTextArea class="form-control" rows="4" @bind-Value="newTestimonial.Message" />
            <ValidationMessage For="@(() => newTestimonial.Message)" />
        </div>

        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
            @(isSubmitting ? "Submitting..." : "Submit Testimonial")
        </button>
    </EditForm>
</div>

@code {
    private List<Testimonial>? topFive;
    private Testimonial newTestimonial = new();
    private bool isSubmitting;

    protected override async Task OnInitializedAsync() => await LoadTopFive();

    private async Task LoadTopFive()
    {
        using var db = await DbFactory.CreateDbContextAsync();
        topFive = await db.Testimonials
            .AsNoTracking()
            .OrderByDescending(t => t.Rating)
            .ThenByDescending(t => t.Date)
            .Take(5)
            .ToListAsync();
    }

    private async Task AddTestimonial()
    {
        isSubmitting = true;

        using var db = await DbFactory.CreateDbContextAsync();
        newTestimonial.Date = DateTime.Now;
        db.Testimonials.Add(newTestimonial);
        await db.SaveChangesAsync();

        newTestimonial = new Testimonial();
        isSubmitting = false;

        await LoadTopFive();
        StateHasChanged();
    }
}

@page "/register"
@using System.ComponentModel.DataAnnotations
@using FargoSpringsSpa.Data
@using FargoSpringsSpa.Models
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inject FargoSpringsSpaContext DbContext
@rendermode InteractiveServer
<PageTitle>Register - Fargo Springs Spa</PageTitle>
<link href="css/login.css" rel="stylesheet" />

<div class="container d-flex flex-column justify-content-center align-items-center mt-5">
    <div class="d-flex align-items-center mb-4 mt-5">
        <h2 class="mb-0">Register With Us!</h2>
    </div>
    <div class="card p-4 mt-2">
        <EditForm Model="@registerModel" OnValidSubmit="HandleValidSubmit" FormName="registerForm">
            <DataAnnotationsValidator />

            @if (usedEmail == true)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <strong>An account with this email already exists.</strong>
                    <a href="/login" class="alert-link">Please log in here.</a>
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            <ValidationSummary />
            <div class="mb-3">
                <label for="nameInput" class="form-label">Full Name</label>
                <InputText id="nameInput" class="form-control" @bind-Value="registerModel.Name" />
                <ValidationMessage For="@(() => registerModel.Name)" />
            </div>
            <div class="mb-3">
                <label for="emailInput" class="form-label">Email address</label>
                <InputText id="emailInput" type="email" class="form-control" @bind-Value="registerModel.Email" />
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>
            <div class="mb-3">
                <label for="passwordInput" class="form-label">Password</label>
                <InputText id="passwordInput" type="password" class="form-control" @bind-Value="registerModel.Password" />
                <ValidationMessage For="@(() => registerModel.Password)" />
            </div>
            <div class="mb-3">
                <label for="confirmPasswordInput" class="form-label">Confirm Password</label>
                <InputText id="confirmPasswordInput" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" />
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
            </div>
            <button type="submit" class="btn btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private RegisterViewModel registerModel = new();

    bool usedEmail = false;

    private async Task HandleValidSubmit()
    {
        usedEmail = false;
        // Check if email already exists
        var existingUser = await DbContext.User
            .FirstOrDefaultAsync(u => u.Email == registerModel.Email);

        if (existingUser != null)
        {
            usedEmail = true;
            return; // Stop registration process
        }
        // Password is not hashed right now. We can add this later if we have time
        var hashedPassword = registerModel.Password; // Replace with real hashing
        var newUser = new User
        {
            Name = registerModel.Name,
            Email = registerModel.Email,
            PasswordHash = hashedPassword,
            Role = "Customer" // Default user role. Admin can change the role of users.
        };
        DbContext.User.Add(newUser);
        await DbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/login");
    }
}
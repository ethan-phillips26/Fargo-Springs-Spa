@page "/register"
@using System.ComponentModel.DataAnnotations
@using FargoSpringsSpa.Data
@using FargoSpringsSpa.Models
@inject NavigationManager NavigationManager
@inject FargoSpringsSpaContext DbContext
@rendermode InteractiveServer

<PageTitle>Register - Fargo Springs Spa</PageTitle>
<link href="css/login.css" rel="stylesheet" />

<div class="container-fluid py-5">
    <div class="row mb-5">
        <div class="col-12 text-center">
            <h1 class="display-4 text-black fw-bold mb-3">Register</h1>
            <p class="lead text-muted">Create your account to book appointments and manage your profile</p>
        </div>
    </div>

    <div class="container d-flex flex-column justify-content-center align-items-center">
        <div class="card p-4 mt-2 shadow-sm" style="max-width: 500px; width: 100%;">
            <EditForm Model="@registerModel" OnValidSubmit="HandleValidSubmit" FormName="registerForm">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="nameInput" class="form-label">Full Name</label>
                    <InputText id="nameInput" class="form-control" @bind-Value="registerModel.Name" />
                    <ValidationMessage For="@(() => registerModel.Name)" />
                </div>
                <div class="mb-3">
                    <label for="emailInput" class="form-label">Email address</label>
                    <InputText id="emailInput" type="email" class="form-control" @bind-Value="registerModel.Email" />
                    <ValidationMessage For="@(() => registerModel.Email)" />
                </div>
                <div class="mb-3">
                    <label for="passwordInput" class="form-label">Password</label>
                    <InputText id="passwordInput" type="password" class="form-control" @bind-Value="registerModel.Password" />
                    <ValidationMessage For="@(() => registerModel.Password)" />
                </div>
                <div class="mb-3">
                    <label for="confirmPasswordInput" class="form-label">Confirm Password</label>
                    <InputText id="confirmPasswordInput" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" />
                    <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                </div>
                <button type="submit" class="btn btn-primary w-100">Register</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private RegisterViewModel registerModel = new();

    private async Task HandleValidSubmit()
    {
        // Password is not hashed right now. We can add this later if we have time
        var hashedPassword = registerModel.Password; // Replace with real hashing
        var newUser = new User
        {
            Name = registerModel.Name,
            Email = registerModel.Email,
            PasswordHash = hashedPassword,
            Role = "Customer" // Default user role. Admin can change the role of users.
        };
        DbContext.User.Add(newUser);
        await DbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/login");
    }
}

@page "/users/edit"
@using Microsoft.EntityFrameworkCore
@using FargoSpringsSpa.Models
@inject IDbContextFactory<FargoSpringsSpa.Data.FargoSpringsSpaContext> DbFactory
@inject NavigationManager NavigationManager
<PageTitle>Edit</PageTitle>
<h1>Edit</h1>
<h2>User</h2>
<hr />
@if (User is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="User" OnValidSubmit="UpdateUser" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="User.Id" value="@User.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="User.Name" class="form-control" />
                    <ValidationMessage For="() => User.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="User.Email" class="form-control" />
                    <ValidationMessage For="() => User.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="passwordhash" class="form-label">PasswordHash:</label>
                    <InputText id="passwordhash" @bind-Value="User.PasswordHash" class="form-control" />
                    <ValidationMessage For="() => User.PasswordHash" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="role" class="form-label">Role:</label>
                    <InputSelect id="role" @bind-Value="User.Role" class="form-control">
                        <option value="Customer">Customer</option>
                        <option value="Employee">Employee</option>
                        <option value="Admin">Admin</option>
                    </InputSelect>
                    <ValidationMessage For="() => User.Role" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}
<div>
    <a href="/users">Back to List</a>
</div>
@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }
    [SupplyParameterFromForm]
    private User? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        User ??= await context.User.FirstOrDefaultAsync(m => m.Id == Id);
        if (User is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateUser()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(User!).State = EntityState.Modified;

        try
        {
            // If user is employee generate employee in database
            if (User.Role == "Employee")
            {

                var existingAvailability = await context.EmployeeAvailability
                    .FirstOrDefaultAsync(a => a.Id == User.Id);


                if (existingAvailability == null)
                {
                    // Default employee data
                    var employee = new Employee
                    {
                        Id = User.Id,
                        Bookings = new List<Booking>(),
                        Availability = new EmployeeAvailability
                        {
                            Id = User.Id,
                            StartTime = TimeOnly.FromDateTime(DateTime.Today.AddHours(9)),
                            EndTime = TimeOnly.FromDateTime(DateTime.Today.AddHours(17)),
                            Monday = true,
                            Tuesday = true,
                            Wednesday = true,
                            Thursday = true,
                            Friday = true,
                            Saturday = false,
                            Sunday = false,
                            IsActive = true
                        }
                    };

                    context.Employee.Add(employee);
                }
            }

            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!UserExists(User!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }
        NavigationManager.NavigateTo("/users");
    }

    private bool UserExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.User.Any(e => e.Id == id);
    }
}
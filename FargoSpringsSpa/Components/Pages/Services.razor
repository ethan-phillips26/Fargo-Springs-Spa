@page "/services"
@using Microsoft.EntityFrameworkCore
@using FargoSpringsSpa.Models
@inject IDbContextFactory<FargoSpringsSpa.Data.FargoSpringsSpaContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Services - Fargo Springs Spa</PageTitle>

<link href="css/services.css" rel="stylesheet" />

<div class="container-fluid py-5">
    <div class="row mb-5">
        <div class="col-12 text-center">
            <h1 class="display-4 text-black fw-bold mb-3">Our Spa Services</h1>
            <p class="lead text-muted">Relax, rejuvenate, and restore your mind, body, and spirit</p>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading services...</span>
            </div>
            <p class="mt-3">Loading our services...</p>
        </div>
    }
    else if (!services.Any())
    {
        <div class="text-center py-5">
            <i class="fas fa-spa fa-3x text-muted mb-3"></i>
            <h4>No Services Available</h4>
            <p class="text-muted">Please check back later for our service offerings.</p>
        </div>
    }
    else
    {
        <!-- Services Grid -->
        <div class="row g-4">
            @foreach (var service in services)
            {
                <div class="col-lg-4 col-md-6 col-sm-12">
                    <div class="card h-100 shadow-sm border-0 service-card">
                        <div class="card-header text-white text-center p-4">
                            <i class="fas fa-spa fa-3x mb-3"></i>
                            <h4 class="card-title mb-0 fw-bold">@service.Name</h4>
                        </div>
                        <div class="card-body d-flex flex-column p-4">
                            <p class="card-text mb-3 text-white">@service.Description</p>

                            <div class="service-details mb-4 flex-grow-1">
                                <div class="d-flex align-items-center mb-2">
                                    <i class="fas fa-clock me-2"></i>
                                    <small class="text-white">Duration: @service.DurationInMinutes minutes</small>
                                </div>
                            </div>

                            <div class="text-center mb-3">
                                <span class="h4 text-white fw-bold">$@service.Price.ToString("F2")</span>
                            </div>

                            <button class="btn btn-primary btn-lg w-100 schedule-btn"
                                    @onclick="() => OpenBookingModal(service.Id)">
                                <i class="fas fa-calendar-plus me-2"></i>
                                Book Appointment
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <!-- Booking Modal -->
    @if (showModal)
    {
        <div class="modal fade show d-block" tabindex="-1" role="dialog" aria-hidden="false">
            <div class="modal-backdrop fade show"></div>
            <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header bg-dark-green text-white">
                        <h5 class="modal-title">Book Your Appointment</h5>
                        <button type="button" class="btn-close btn-close-white" @onclick="CloseModal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body p-4">
                        @if (selectedService != null)
                        {
                            <div class="text-center mb-4 p-3 bg-light rounded">
                                <h6 class="text-primary mb-1">@selectedService.Name</h6>
                                <p class="text-muted small mb-1">@selectedService.Description</p>
                                <div class="d-flex justify-content-center align-items-center gap-3">
                                    <span class="badge bg-primary">$@selectedService.Price.ToString("F2")</span>
                                    <span class="badge bg-info">@selectedService.DurationInMinutes min</span>
                                </div>
                            </div>
                        }

                        <form>
                            <div class="row g-3">
                                <div class="col-12">
                                    <label class="form-label fw-bold">Select Employee *</label>
                                    <select class="form-control" @bind="selectedEmployeeId" @bind:after="EmployeeChanged" required>
                                        <option value="0">Select an employee...</option>
                                        @foreach (var employee in employees)
                                        {
                                            <option value="@employee.Id">@GetEmployeeName(employee.Id)</option>
                                        }
                                    </select>
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label fw-bold">Date *</label>
                                    <input type="date" class="form-control" @bind="selectedDate" @bind:after="DateChanged"
                                           min="@DateTime.Today.ToString("yyyy-MM-dd")" required>
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label fw-bold">Time *</label>
                                    @if (availableTimes.Count == 0 && selectedEmployeeId > 0 && selectedDate != default)
                                    {
                                        <p class="text-danger">No times available for this date</p>
                                    }
                                    else
                                    {
                                        <select class="form-control" @bind="selectedTime" required>
                                            <option value="">Select time...</option>
                                            @foreach (var time in availableTimes)
                                            {
                                                <option value="@time">@time</option>
                                            }
                                        </select>
                                    }
                                </div>

                                <div class="col-12">
                                    <label class="form-label fw-bold">Notes</label>
                                    <textarea class="form-control" rows="3" @bind="notes"
                                              placeholder="Any special requests?"></textarea>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer bg-light">
                        <button type="button" class="btn btn-outline-secondary" @onclick="CloseModal">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="SaveBooking"
                                disabled="@(selectedEmployeeId == 0 || string.IsNullOrEmpty(selectedTime))">
                            Book Appointment
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (showSuccessMessage)
{
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 1070;">
        <div class="toast show bg-success text-white border-0">
            <div class="toast-body d-flex align-items-center">
                <i class="fas fa-check-circle me-2 fa-lg"></i>
                <div>
                    <strong>Success!</strong><br>
                    <small>Booking request submitted successfully!</small>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Service> services = new();
    private List<Employee> employees = new();
    private List<string> availableTimes = new();
    private List<Booking> existingBookings = new();
    private List<User> users = new();

    private bool isLoading = true;
    private bool showModal = false;
    private bool showSuccessMessage = false;

    private Service? selectedService;
    private int selectedEmployeeId = 0;
    private DateTime selectedDate = DateTime.Today.AddDays(1);
    private string selectedTime = "";
    private string notes = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        using var context = DbFactory.CreateDbContext();

        services = await context.Service.OrderBy(s => s.Name).ToListAsync();

        employees = await context.Employee
            .Include(e => e.Availability)
            .Where(e => e.Availability.IsActive)
            .OrderBy(e => e.Id)
            .ToListAsync();

        users = await context.User.ToListAsync();

        isLoading = false;
    }

    private string GetEmployeeName(int employeeId)
    {
        var user = users.FirstOrDefault(u => u.Id == employeeId);
        return user?.Name ?? $"Employee {employeeId}";
    }


    private void OpenBookingModal(int serviceId)
    {
        selectedService = services.FirstOrDefault(s => s.Id == serviceId);
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        selectedEmployeeId = 0;
        selectedDate = DateTime.Today.AddDays(1);
        selectedTime = "";
        notes = "";
        availableTimes.Clear();
    }

    private async Task EmployeeChanged()
    {
        selectedTime = "";
        if (selectedEmployeeId > 0)
        {
            await UpdateAvailableTimes();
        }
        StateHasChanged();
    }

    private async Task DateChanged()
    {
        selectedTime = "";
        if (selectedEmployeeId > 0)
        {
            await UpdateAvailableTimes();
        }
        StateHasChanged();
    }

    private async Task UpdateAvailableTimes()
    {
        availableTimes.Clear();

        if (selectedEmployeeId == 0 || selectedDate == default)
        {
            return;
        }

        using var context = DbFactory.CreateDbContext();

        var employee = await context.Employee
            .Include(e => e.Availability)
            .FirstOrDefaultAsync(e => e.Id == selectedEmployeeId);

        if (employee?.Availability == null)
        {
            return;
        }

        var dayOfWeek = selectedDate.DayOfWeek;
        bool worksToday = dayOfWeek switch
        {
            DayOfWeek.Monday => employee.Availability.Monday,
            DayOfWeek.Tuesday => employee.Availability.Tuesday,
            DayOfWeek.Wednesday => employee.Availability.Wednesday,
            DayOfWeek.Thursday => employee.Availability.Thursday,
            DayOfWeek.Friday => employee.Availability.Friday,
            DayOfWeek.Saturday => employee.Availability.Saturday,
            DayOfWeek.Sunday => employee.Availability.Sunday,
            _ => false
        };

        if (!worksToday)
        {
            return;
        }

        existingBookings = await context.Booking
            .Include(b => b.Service)
            .Where(b => b.UserId == UserSession.GetUserId() &&
                       b.AppointmentDate.Date == selectedDate.Date)
            .ToListAsync();

        CreateTimeSlots(employee.Availability.StartTime, employee.Availability.EndTime);
    }

    private void CreateTimeSlots(TimeOnly startTime, TimeOnly endTime)
    {
        availableTimes.Clear();

        var currentTime = startTime;
        var serviceDuration = selectedService?.DurationInMinutes ?? 60;

        while (currentTime.AddMinutes(serviceDuration) <= endTime)
        {
            if (IsTimeSlotAvailable(currentTime, serviceDuration))
            {
                availableTimes.Add(currentTime.ToString("h:mm tt"));
            }

            currentTime = currentTime.AddMinutes(30);
        }
    }

    private bool IsTimeSlotAvailable(TimeOnly timeSlot, int durationMinutes)
    {
        var slotStart = selectedDate.Date.Add(timeSlot.ToTimeSpan());
        var slotEnd = slotStart.AddMinutes(durationMinutes);

        foreach (var booking in existingBookings)
        {
            var bookingStart = booking.AppointmentDate;
            var bookingEnd = booking.AppointmentDate.AddMinutes(booking.Service?.DurationInMinutes ?? 60);

            if (slotStart < bookingEnd && slotEnd > bookingStart)
            {
                return false;
            }
        }

        return true;
    }

    private async Task SaveBooking()
    {
        using var context = DbFactory.CreateDbContext();
        var appointmentDateTime = DateTime.Parse($"{selectedDate:yyyy-MM-dd} {selectedTime}");

        var booking = new Booking
        {
            UserId = UserSession.GetUserId()!,
            ServiceId = selectedService!.Id,
            AppointmentDate = appointmentDateTime,
            Status = "Requested",
            EmployeeId = selectedEmployeeId,
            Notes = notes
        };

        context.Booking.Add(booking);
        await context.SaveChangesAsync();

        CloseModal();
        showSuccessMessage = true;
        StateHasChanged();
        await Task.Delay(3000);
        showSuccessMessage = false;
        StateHasChanged();
    }
}
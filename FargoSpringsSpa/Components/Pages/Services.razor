@page "/services"
@using Microsoft.EntityFrameworkCore
@using FargoSpringsSpa.Models
@inject IDbContextFactory<FargoSpringsSpa.Data.FargoSpringsSpaContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Services - Fargo Springs Spa</PageTitle>

<div class="services-container">
    <div class="services-header">
        <h1>Our Spa Services</h1>
        <p class="services-subtitle">Relax, rejuvenate, and restore your mind, body, and spirit</p>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Loading our services...</p>
        </div>
    }
    else
    {
        <div class="services-grid">
            @foreach (var service in displayServices)
            {
                <div class="service-card">
                    <div class="service-icon">
                        <span class="icon">@GetServiceIcon(service.Name)</span>
                    </div>
                    <div class="service-content">
                        <h3 class="service-name">@service.Name</h3>
                        <p class="service-description">@service.Description</p>

                        <div class="service-details">
                            <div class="detail-item">
                                <span class="detail-label">Duration:</span>
                                <span class="detail-value">@service.DurationInMinutes minutes</span>
                            </div>
                            <div class="detail-item price-item">
                                <span class="service-price">$@service.Price.ToString("F2")</span>
                            </div>
                        </div>

                        <button class="btn btn-primary service-book-btn"
                                @onclick="() => ScheduleAppointment(service.Id)">
                            Book Appointment
                        </button>
                    </div>
                </div>
            }
        </div>
    }

    <!-- Booking Modal -->
    @if (showBookingModal)
    {
        <div class="modal-backdrop">
            <div class="modal-container">
                <div class="modal-header">
                    <h3>Book Your Appointment</h3>
                    <button class="modal-close" @onclick="CloseModal">&times;</button>
                </div>
                <div class="modal-body">
                    @if (selectedService != null)
                    {
                        <div class="selected-service-info">
                            <h4>@selectedService.Name</h4>
                            <p>@selectedService.Description</p>
                            <div class="service-info-badges">
                                <span class="badge price-badge">$@selectedService.Price.ToString("F2")</span>
                                <span class="badge duration-badge">@selectedService.DurationInMinutes min</span>
                            </div>
                        </div>
                    }

                    <form class="booking-form">
                        <div class="form-row">
                            <div class="form-group">
                                <label>Preferred Date *</label>
                                <input type="date" class="form-control" @bind="bookingForm.PreferredDate"
                                       min="@DateTime.Today.ToString("yyyy-MM-dd")" required>
                            </div>
                            <div class="form-group">
                                <label>Preferred Time *</label>
                                <select class="form-control" @bind="bookingForm.PreferredTime" required>
                                    <option value="">Select time...</option>
                                    @foreach (var time in availableTimes)
                                    {
                                        <option value="@time">@time</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="form-group full-width">
                            <label>Special Requests or Notes</label>
                            <textarea class="form-control" rows="3" @bind="bookingForm.Notes"
                                      placeholder="Any special requests, allergies, or preferences?"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="SubmitBooking" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <span class="loading-spinner small"></span>
                        }
                        Request Booking
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@if (showSuccessMessage)
{
    <div class="success-toast">
        <div class="toast-content">
            <span class="success-icon">✓</span>
            <div>
                <strong>Success!</strong><br>
                <small>Booking request submitted! We'll contact you within 24 hours to confirm your appointment.</small>
            </div>
        </div>
    </div>
}

@code {
    private List<Service> services = new();
    private List<Service> displayServices = new();
    private bool isLoading = true;
    private bool showBookingModal = false;
    private bool showSuccessMessage = false;
    private bool isSubmitting = false;
    private Service? selectedService;
    private BookingRequest bookingForm = new();
    private List<string> availableTimes = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadServices();
        LoadAvailableTimes();
    }

    private async Task LoadServices()
    {
        isLoading = true;
        try
        {
            using var context = DbFactory.CreateDbContext();
            services = await context.Service.OrderBy(s => s.Name).ToListAsync();

            // If no services in database, use sample services
            if (!services.Any())
            {
                displayServices = GetSampleServices();
            }
            else
            {
                displayServices = services;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading services: {ex.Message}");
            // Fallback to sample services
            displayServices = GetSampleServices();
        }
        finally
        {
            isLoading = false;
        }
    }

    private List<Service> GetSampleServices()
    {
        return new List<Service>
        {
            new Service
            {
                Id = 1,
                Name = "Swedish Massage",
                Description = "A classic full-body massage using gentle, flowing strokes to promote relaxation and relieve muscle tension. Perfect for stress relief and overall wellness.",
                DurationInMinutes = 60,
                Price = 120.00M
            },
            new Service
            {
                Id = 2,
                Name = "Deep Tissue Massage",
                Description = "Therapeutic massage focusing on deeper layers of muscle tissue. Ideal for chronic pain relief and muscle recovery.",
                DurationInMinutes = 75,
                Price = 150.00M
            },
            new Service
            {
                Id = 3,
                Name = "Hot Stone Therapy",
                Description = "Warm basalt stones are placed on key points of your body to melt away tension and promote deep relaxation and healing.",
                DurationInMinutes = 90,
                Price = 180.00M
            },
            new Service
            {
                Id = 4,
                Name = "Aromatherapy Massage",
                Description = "Combines the benefits of massage with the therapeutic properties of essential oils to enhance physical and emotional well-being.",
                DurationInMinutes = 60,
                Price = 135.00M
            },
            new Service
            {
                Id = 5,
                Name = "European Facial",
                Description = "A luxurious facial treatment that cleanses, exfoliates, and nourishes your skin, leaving it refreshed and glowing.",
                DurationInMinutes = 75,
                Price = 95.00M
            },
            new Service
            {
                Id = 6,
                Name = "Anti-Aging Facial",
                Description = "Advanced facial treatment targeting fine lines and age spots with specialized serums and techniques for youthful, radiant skin.",
                DurationInMinutes = 90,
                Price = 125.00M
            },
            new Service
            {
                Id = 7,
                Name = "Body Wrap Treatment",
                Description = "Detoxifying and hydrating full-body treatment that nourishes your skin while promoting relaxation and rejuvenation.",
                DurationInMinutes = 75,
                Price = 110.00M
            },
            new Service
            {
                Id = 8,
                Name = "Couples Massage",
                Description = "Romantic side-by-side massage experience for two people in our couples suite, perfect for special occasions.",
                DurationInMinutes = 60,
                Price = 280.00M
            }
        };
    }

    private string GetServiceIcon(string serviceName)
    {
        return serviceName.ToLower() switch
        {
            var name when name.Contains("massage") => "🌿",
            var name when name.Contains("facial") => "✨",
            var name when name.Contains("stone") => "🔥",
            var name when name.Contains("aromatherapy") => "🌸",
            var name when name.Contains("wrap") => "🧖‍♀️",
            var name when name.Contains("couples") => "💕",
            _ => "🧘‍♀️"
        };
    }

    private void LoadAvailableTimes()
    {
        availableTimes = new List<string>
        {
            "9:00 AM", "10:00 AM", "11:00 AM", "12:00 PM",
            "1:00 PM", "2:00 PM", "3:00 PM", "4:00 PM", "5:00 PM"
        };
    }

    private void ScheduleAppointment(int serviceId)
    {
        selectedService = displayServices.FirstOrDefault(s => s.Id == serviceId);
        if (selectedService != null)
        {
            bookingForm = new BookingRequest { ServiceId = serviceId };
            showBookingModal = true;
            StateHasChanged();
        }
    }

    private void CloseModal()
    {
        showBookingModal = false;
        bookingForm = new BookingRequest();
        isSubmitting = false;
        selectedService = null;
        StateHasChanged();
    }

    private async Task SubmitBooking()
    {
        if (string.IsNullOrWhiteSpace(bookingForm.PreferredTime))
        {
            return;
        }

        isSubmitting = true;
        StateHasChanged();

        try
        {
            using var context = DbFactory.CreateDbContext();

            var appointmentDateTime = CombineDateAndTime(bookingForm.PreferredDate, bookingForm.PreferredTime);

            var booking = new Booking
            {
                UserId = @UserSession.GetUserId()!,
                ServiceId = bookingForm.ServiceId,
                AppointmentDate = appointmentDateTime,
                Status = "Requested",
                Notes = bookingForm.Notes ?? string.Empty
            };

            context.Booking.Add(booking);
            await context.SaveChangesAsync();

            showBookingModal = false;
            showSuccessMessage = true;
            bookingForm = new BookingRequest();
            selectedService = null;

            StateHasChanged();

            _ = Task.Delay(5000).ContinueWith(t =>
            {
                showSuccessMessage = false;
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting booking: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private DateTime CombineDateAndTime(DateTime date, string timeString)
    {
        if (TimeSpan.TryParse(ConvertTo24Hour(timeString), out var time))
        {
            return date.Date.Add(time);
        }
        return date.Date.AddHours(9);
    }

    private string ConvertTo24Hour(string time12Hour)
    {
        return time12Hour.ToUpper() switch
        {
            "9:00 AM" => "09:00",
            "10:00 AM" => "10:00",
            "11:00 AM" => "11:00",
            "12:00 PM" => "12:00",
            "1:00 PM" => "13:00",
            "2:00 PM" => "14:00",
            "3:00 PM" => "15:00",
            "4:00 PM" => "16:00",
            "5:00 PM" => "17:00",
            _ => "09:00"
        };
    }

    public class BookingRequest
    {
        public int ServiceId { get; set; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public DateTime PreferredDate { get; set; } = DateTime.Today.AddDays(1);
        public string PreferredTime { get; set; } = string.Empty;
        public string Notes { get; set; } = string.Empty;
    }
}